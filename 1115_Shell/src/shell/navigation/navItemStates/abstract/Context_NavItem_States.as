package shell.navigation.navItemStates.abstract{import shell.navigation.navItemStates.ButtonOFFState;import shell.navigation.navItemStates.ButtonONState;import shell.navigation.navItemStates.ButtonOVERState;import shell.navigation.navTabItemFactoryPattern.CreateNavItem;//Context class	public class Context_NavItem_States	{        private var vars:Object;		private var onButton:IState_ButtonONOFF;		private var offButton:IState_ButtonONOFF;        private var overButton:IState_ButtonONOFF;        private var state:IState_ButtonONOFF;        private var _onStateChange:Function;		public function Context_NavItem_States(_target:CreateNavItem, vars:Object = null)		{            this.vars = (vars != null) ? vars : {};            _onStateChange = (this.vars.onStateChange != null) ? this.vars.onStateChange : null;            onButton = new ButtonONState(this, _target);            offButton = new ButtonOFFState(this, _target);            overButton = new ButtonOVERState(this, _target);			state=onButton;		}		public function ON():void		{			state.ON();		}		public function OFF():void		{			state.OFF();		}        public function OVER():void {            state.OVER();        }		public function setState(state:IState_ButtonONOFF):void		{			this.state=state;            this.onStateChange();		}		public function getState():IState_ButtonONOFF		{			return state;		}		public function getOnButtonState():IState_ButtonONOFF		{			return this.onButton;		}		public function getOffButtonState():IState_ButtonONOFF		{			return this.offButton;		}        public function getOverButtonState():IState_ButtonONOFF        {            return this.overButton;        }        private function onStateChange():void {            if (_onStateChange != null) {                _onStateChange.apply(null, [state]);            }        }	}}