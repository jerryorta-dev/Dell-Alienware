package com.dpa.graphics.core{	import flash.display.Graphics;	import flash.geom.Point;			/**	 * Helper class for rounding path corners	 * @author Philippe / http://philippe.elsass.me	 */	public class RoundPathHelper	{						static public function drawRoundPath(vars:Object=null):void		{			// code by Philippe / http://philippe.elsass.me			var _g:Graphics;			var _radius:Number;			var _closePath:Boolean;			//var _points:Vector.<Point>;			//var _radii:Vector.<Number>;			var _points:Array;			var _radii:Array;						_g = (vars.g != null) ? vars.g : null;			_points = (vars.points != null) ? vars.points : null;			_radius = (vars.radius != null) ? vars.radius : null;			_closePath = (vars.closePath != null) ? vars.closePath : true;			_radii = (vars.radii != null) ? vars.radii : null;									var count:int = _points.length;			if (count < 2) return;			if (_closePath && count < 3) return;						var p0:Point = _points[0];			var p1:Point = _points[1];			var p2:Point;			var pp0:Point;			var pp2:Point;						var last:Point;			if (!_closePath) 			{				_g.moveTo(p0.x, p0.y);				last = _points[count - 1];			}						var n:int = (_closePath) ? count + 1 : count - 1;						for (var i:int = 1; i < n; i++)			{                p2 = _points[(i + 1) % count];				var v0:Point = p0.subtract(p1);				var v2:Point = p2.subtract(p1);				var r:Number;				if (_radii != null) {					//r = Math.max(1, Math.min(_radii[i - 1], Math.min(v0.length / 2, v2.length / 2)));                    r = _radii[i - 1];				} else {					r = Math.max(1, Math.min(_radius, Math.min(v0.length / 2, v2.length / 2)));				}								v0.normalize(r);				v2.normalize(r);				pp0 = p1.add(v0);				pp2 = p1.add(v2);								if (i == 1 && _closePath)				{					_g.moveTo(pp0.x, pp0.y);					last = pp0;				}				else _g.lineTo(pp0.x, pp0.y);								_g.curveTo(p1.x, p1.y, pp2.x, pp2.y);				p0 = p1;				p1 = p2;			}						_g.lineTo(last.x, last.y);		}			}	}